'''
TODO
    sudoku generator - very hard. basically try to solve after removing stuff for single sol puzzles
    ## DONE  ##   more human like method of solving
                    store a list of possible values of each square and put the value in if only 1 available. then remove this value from the corresponding lists of squares
                    integrate both methods for faster search
    ## not needed  ##   if not previous method, randomise what/ numbers and squares to try

text
    create square objects
    square.hori, square.vert, square.box, square.values, 
    if a value is confirmed, remove that value from all objects from square.hori,vert,box
    how to try values that we cant confirm? (no square.values has just 1 value left):
        copy.copy() objects in a recursive function
    while removing values from square.values, check if only 1 value remaining. and maybe also 2 and 3 for priority
    maintain list of empty squares for loop (was already doing this)

    how this helps?:
        dont have to loop through all squares just to check the if it lies in same box etc
        square.values would all for checking only useful values and not check if its valid
'''

https://stackoverflow.com/questions/1518346/optimizing-the-backtracking-algorithm-solving-sudoku/48239141#48239141

    The next blank cell can be chosen in the following ways:
        A - the first cell from left to right, from top to bottom
        B - the first cell from right to left, from bottom to top
        C - a randomly chosen cell
        D - the closest cell to the center of the grid
        E - the cell that currently has the fewest choices available (choice here means a digit from 1 to 9)
        F - the cell that currently has the most choices available
        G - the cell that has the fewest blank related cells (a related cells is one from the same row, from the same column or from the same 3x3 quadrant)
        H - the cell that has the most blank related cells
        I - the cell that is closest to all filled cells (as measured from cell center point to cell center point)
        J - the cell that is furthest from all filled cells
        K - the cell whose related blank cells have the fewest available choices
        L - the cell whose related blank cells have the most available choices

    And the next digit can be chosen in the following ways:
        0 - the lowest digit
        1 - the highest digit
        2 - a randomly chosen digit
        3 - heuristically, the least used digit across the board
        4 - heuristically, the most used digit across the board
        5 - the digit that will cause related blank cells to have the least number of choices available
        6 - the digit that will cause related blank cells to have the most number of choices available
        7 - the digit that is the least common available choice among related blank cells
        8 - the digit that is the most common available choice among related blank cells
        9 - the digit that is the least common available choice across the board
        a - the digit that is the most common available choice across the board

    The winners in both categories are "E36", "E37", "EA36" and "EA37" with time of 109 ms, 362 iterations and 301 backtrack iterations. Also, the first 38 positions were dominated with by a beginning "E".